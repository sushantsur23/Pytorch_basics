{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Section_001_PyTorch_Introduction/","title":"Section: 1 PyTorch Introduction","text":""},{"location":"Section_001_PyTorch_Introduction/#introduction-to-pytorch","title":"Introduction to PyTorch","text":"<ul> <li>PyTorch official docs - pytorch.org</li> </ul>"},{"location":"Section_001_PyTorch_Introduction/#pytorch-installation-and-setup","title":"PyTorch installation and setup","text":"<ul> <li>PyTorch installation reference - Click here</li> <li>Notebook insallation command -      <pre><code>pip install notebook\n</code></pre></li> </ul>"},{"location":"Section_001_PyTorch_Introduction/#demo-notebooks-","title":"Demo Notebooks -","text":"<ul> <li>PyTorch installation and setup first demo - nbviewer</li> </ul>"},{"location":"Section_002_PyTorch_Tensors_and_Operations/","title":"Section: 2 PyTorch Tensors and Operations","text":""},{"location":"Section_002_PyTorch_Tensors_and_Operations/#what-is-tensor","title":"What is tensor?","text":"<ul> <li>A kind of data structure =&gt; multidimensional arrays or matrices </li> <li>With tensors you enocode all your parameters.</li> </ul>"},{"location":"Section_002_PyTorch_Tensors_and_Operations/#type-conversions","title":"Type Conversions","text":"<ul> <li>Conversions from one datatype to another.</li> <li>Conversions from torch tensors to numpy arrays and vice versa.</li> </ul>"},{"location":"Section_002_PyTorch_Tensors_and_Operations/#demo-notebooks-","title":"Demo Notebooks -","text":"<ul> <li> <p>What is tensor? &amp; Type Conversions- nbviewer</p> </li> <li> <p>Mathematical Operations - nbviewer</p> </li> <li> <p>Indexing, Slicing, Concatenation, Reshaping Ops - nbviewer</p> </li> </ul>"},{"location":"Section_003_AutoGrad/","title":"Section: 3 AutoGrad","text":"<p>PyTorch has a capability of automatic gradient calculation !</p>"},{"location":"Section_003_AutoGrad/#why-we-require-autograd","title":"Why we require AutoGrad ?","text":"<p>When we do backpropragation we need to calculate gradient of loss function w.r.t weight </p> <p>If we do gradient calculation with hands it will take time and it won't be dynamic as then we would have to write each derivative manually. </p> <p>To resolve this issue PyTorch has a capability to calculate derivative of function automatically which is also known as AutoGrad. </p> <p>Info</p> <p>A simplified model of a PyTorch tensor is as an object containing the following properties:</p> <ol> <li>data \u2014 a self-reference.</li> <li>required_grad \u2014 whether or not this tensor is/should be connected to the computational graph.</li> <li>grad \u2014 if required_grad is true, this prop will be a sub-tensor that collects the gradients against this tensor accumulated during backwardpropagation.</li> <li>grad_fn \u2014 This is a reference to the most recent operation which generated this tensor. PyTorch performs automatic differentiation by looking through the grad_fn list.</li> <li>is_leaf \u2014 Whether or not this is a leaf node.</li> </ol>"},{"location":"Section_003_AutoGrad/#demo-notebooks-","title":"Demo Notebooks -","text":"<ul> <li>Derivatives, Partial derivative, &amp; Successive Differentiation - nbviewer</li> </ul>"},{"location":"Section_004_PyTorch_First_NN/","title":"Section 4: First Neural Network","text":""},{"location":"Section_004_PyTorch_First_NN/#demo-notebooks-","title":"Demo Notebooks -","text":"<ul> <li> <p>Simple ANN Implementation - nbviewer</p> Alternative link <p>Alternative link - source repository</p> </li> </ul>"},{"location":"Section_005_Custom_data_loading/","title":"Section 5: Custom Data Loading","text":""},{"location":"Section_005_Custom_data_loading/#structured-dataset-","title":"Structured dataset -","text":"<ul> <li> <p>Implementation - nbviewer</p> </li> <li> <p>Data - iris</p> Alternative link <p>Alternative link - source repository</p> </li> </ul>"},{"location":"Section_005_Custom_data_loading/#un-structured-dataset-","title":"Un-Structured dataset -","text":"<ul> <li> <p>Implementation - nbviewer</p> </li> <li> <p>Data - Image_data</p> Alternative link <p>Alternative link - source repository</p> </li> </ul>"},{"location":"Section_006_CNN/","title":"Section 6: Convolutional Neural Network","text":""},{"location":"Section_006_CNN/#create-data-loader-","title":"Create data loader-","text":"<ul> <li> <p>Implementation - nbviewer</p> Alternative link <p>Alternative link - source repository</p> </li> <li> <p>Data - Image_data</p> </li> </ul>"},{"location":"Section_006_CNN/#define-cnn-model-architecture-","title":"Define CNN model architecture -","text":"<ul> <li> <p>Implementation - nbviewer</p> Alternative link <p>Alternative link - source repository</p> <p>Update: add relu in forward method</p> <pre><code>def forward(self, x):\nx = self.conv_pool_01(x)\nx = self.conv_pool_02(x)\nx = self.Flatten(x)\nx = self.FC_01(x)\nx = F.relu(x)\nx = self.FC_02(x)\nx = F.relu(x)    \nx = self.FC_03(x)\nreturn x\n</code></pre> </li> <li> <p>Data - Image_data</p> </li> </ul>"},{"location":"Section_006_CNN/#train-cnn-model-","title":"Train CNN model -","text":"<ul> <li> <p>Implementation - nbviewer</p> Alternative link <p>Alternative link - source repository</p> </li> <li> <p>Data - Image_data</p> </li> </ul>"},{"location":"Section_006_CNN/#evaluate-cnn-model-","title":"Evaluate CNN model -","text":"<ul> <li> <p>Implementation - nbviewer</p> Alternative link <p>Alternative link - source repository</p> </li> <li> <p>Data - Image_data</p> </li> </ul>"},{"location":"Section_006_CNN/#predict-using-cnn-model-","title":"Predict using CNN model -","text":"<ul> <li> <p>Implementation - nbviewer</p> Alternative link <p>Alternative link - source repository</p> </li> <li> <p>Data - Image_data</p> </li> </ul>"},{"location":"Section_007_Transfer_learning/","title":"Section 7: Transfer learning","text":""},{"location":"Section_007_Transfer_learning/#download-data-unzip-and-create-data-loader-","title":"Download data, unzip and create data loader-","text":"<ul> <li> <p>Implementation - nbviewer</p> Alternative link <p>Alternative link - source repository</p> </li> </ul>"},{"location":"Section_007_Transfer_learning/#download-and-use-pretrained-model-","title":"Download and use pretrained model-","text":"<ul> <li> <p>Implementation - nbviewer</p> Alternative link <p>Alternative link - source repository</p> </li> </ul>"},{"location":"Section_007_Transfer_learning/#train-our-model-","title":"Train our model-","text":"<ul> <li> <p>Implementation - nbviewer</p> Alternative link <p>Alternative link - source repository</p> </li> </ul>"},{"location":"Section_007_Transfer_learning/#evaluate-our-model-","title":"Evaluate our model-","text":"<ul> <li> <p>Implementation - nbviewer</p> Alternative link <p>Alternative link - source repository</p> </li> </ul>"},{"location":"Section_007_Transfer_learning/#prediction-and-visualizing-prediction-outcome-","title":"Prediction and visualizing prediction outcome-","text":"<ul> <li> <p>Implementation - nbviewer</p> Alternative link <p>Alternative link - source repository</p> </li> </ul>"}]}